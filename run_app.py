#!/usr/bin/env python3
"""
Simple runner for the LLM Email Autowriter on Lightning AI
This bypasses Lightning App framework and runs Gradio directly
"""
import os
import sys
import subprocess

def install_dependencies():
    """Install required dependencies"""
    print("Installing dependencies...")
    subprocess.check_call([
        sys.executable, "-m", "pip", "install", "-r", "requirements.txt"
    ])
    print("Dependencies installed successfully!")

def setup_environment():
    """Set up environment variables for Lightning AI"""
    os.environ["ENVIRONMENT"] = "production"
    os.environ["DEBUG"] = "false"
    os.environ["VLLM_HOST"] = "localhost"  # Mock for now
    os.environ["VLLM_PORT"] = "8000"
    print("Environment configured for Lightning AI")

def run_gradio_app():
    """Launch the Gradio application with Qwen 7B model"""
    try:
        print("üöÄ Launching LLM Email Autowriter with Qwen 7B model...")
        from app.gradio_ui import create_ui
        from app.config import Config
        
        # Create configuration
        config = Config()
        config.GRADIO_SHARE = False
        config.GRADIO_HOST = "0.0.0.0"
        config.GRADIO_PORT = 7860
        
        # Test model loading
        print("üîç Testing Qwen 7B model...")
        from app.model import get_model
        model = get_model()
        
        # Try a quick test
        test_result = model.generate_email(
            intent="test",
            tone="Professional",
            length="Short",
            max_tokens=50
        )
        print(f"‚úÖ Qwen 7B model working! Test response: {len(test_result)} characters")
        
        # Create and launch UI
        ui = create_ui(config)
        print("‚úÖ Full Qwen 7B application ready! Launching Gradio interface...")
        
        ui.launch(
            server_name="0.0.0.0",
            server_port=7860,
            share=True,  # Enable sharing for Lightning AI
            show_error=True,
            quiet=False
        )
        
    except Exception as e:
        print(f"‚ùå Could not launch Qwen 7B app: {e}")
        print(f"Error details: {str(e)}")
        import traceback
        traceback.print_exc()
        raise e  # Don't fall back to demo - we want the real model

def launch_demo_mode():
    """Launch a simplified demo version"""
    import gradio as gr
    
    def generate_demo_email(intent, tone, length):
        """Generate a demo email"""
        if not intent.strip():
            return "‚ùå Please enter an email intent."
        
        # Create a demo email based on the inputs
        demo_email = f"""Subject: {intent}

Dear [Recipient],

This is a demo email generated with the LLM Email Autowriter.

Intent: {intent}
Tone: {tone}
Length: {length}

This demo shows the interface structure. In the full version, this would be generated by an AI model based on your specific requirements.

The email would be professionally formatted and tailored to your exact needs, including:
- Appropriate greetings and closings
- Professional language matching the selected tone
- Content length matching your preference
- Contextually relevant details

Best regards,
[Your Name]

---
Generated by LLM Email Autowriter (Demo Mode)
"""
        return demo_email
    
    def get_example_intent(example):
        return example
    
    # Create the demo interface
    with gr.Blocks(title="LLM Email Autowriter - Demo") as demo:
        gr.Markdown("""
        # üìß LLM Email Autowriter (Demo Mode)
        
        Generate professional emails from simple intents. This is a demo version running on Lightning AI.
        Enter your email intent below and see how the interface works!
        """)
        
        with gr.Row():
            with gr.Column(scale=2):
                intent_input = gr.Textbox(
                    label="üìù What do you want the email to say?",
                    placeholder="e.g., Ask professor for deadline extension due to personal issues",
                    lines=3
                )
                
                with gr.Row():
                    tone_dropdown = gr.Dropdown(
                        label="üì® Tone",
                        choices=["Professional", "Friendly", "Formal", "Casual", "Polite"],
                        value="Professional"
                    )
                    length_dropdown = gr.Dropdown(
                        label="üìè Length",
                        choices=["Short", "Medium", "Long"],
                        value="Medium"
                    )
                
                generate_btn = gr.Button("‚ú® Generate Demo Email", variant="primary")
            
            with gr.Column(scale=1):
                gr.Markdown("### üí° Example Intents")
                examples = [
                    "Ask professor for deadline extension",
                    "Request meeting with manager",
                    "Thank colleague for help",
                    "Follow up on job application",
                    "Apologize for missing meeting",
                    "Invite team to project kickoff"
                ]
                
                for example in examples:
                    example_btn = gr.Button(example, size="sm")
                    example_btn.click(
                        fn=lambda x=example: x,
                        outputs=intent_input
                    )
        
        email_output = gr.Textbox(
            label="üìÑ Generated Email",
            lines=15,
            show_copy_button=True,
            placeholder="Your generated email will appear here..."
        )
        
        generate_btn.click(
            fn=generate_demo_email,
            inputs=[intent_input, tone_dropdown, length_dropdown],
            outputs=email_output
        )
        
        gr.Markdown("""
        ---
        **Note**: This is a demo version. The full application uses AI models for intelligent email generation.
        Running on Lightning AI ‚ö°
        """)
    
    print("üöÄ Launching demo interface...")
    demo.launch(
        server_name="0.0.0.0",
        server_port=7860,
        share=True,
        show_error=True
    )

if __name__ == "__main__":
    print("üöÄ Starting LLM Email Autowriter on Lightning AI...")
    
    # Install dependencies
    install_dependencies()
    
    # Setup environment
    setup_environment()
    
    # Run the application
    run_gradio_app()
