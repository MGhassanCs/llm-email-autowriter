#!/usr/bin/env python3
"""
Lightning AI Launch Script for LLM Email Autowriter with Qwen 7B

This script optimizes for Lightning AI deployment with GPU compute for Qwen 7B model.
"""
import os
import sys
import subprocess
import logging

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def install_dependencies():
    """Install required dependencies"""
    logger.info("üîß Installing dependencies...")
    try:
        subprocess.check_call([
            sys.executable, "-m", "pip", "install", "-r", "requirements.txt"
        ])
        logger.info("‚úÖ Dependencies installed successfully!")
    except subprocess.CalledProcessError as e:
        logger.error(f"‚ùå Failed to install dependencies: {e}")
        raise

def setup_environment():
    """Set up environment variables for Lightning AI + Qwen 7B"""
    os.environ["ENVIRONMENT"] = "production"
    os.environ["DEBUG"] = "false"
    os.environ["MODEL_NAME"] = "Qwen/Qwen2.5-7B-Instruct"
    os.environ["GRADIO_HOST"] = "0.0.0.0"
    os.environ["GRADIO_PORT"] = "7860"
    logger.info("‚úÖ Environment configured for Lightning AI with Qwen 7B")

def test_gpu_availability():
    """Test if GPU is available for Qwen 7B"""
    try:
        import torch
        if torch.cuda.is_available():
            gpu_count = torch.cuda.device_count()
            gpu_name = torch.cuda.get_device_name(0) if gpu_count > 0 else "Unknown"
            logger.info(f"‚úÖ GPU available: {gpu_name} (Count: {gpu_count})")
            return True
        else:
            logger.warning("‚ö†Ô∏è No GPU available, will use CPU (slower for Qwen 7B)")
            return False
    except ImportError:
        logger.warning("‚ö†Ô∏è PyTorch not available, cannot check GPU status")
        return False

def launch_qwen_app():
    """Launch the Qwen 7B email autowriter application"""
    try:
        logger.info("üöÄ Launching LLM Email Autowriter with Qwen 7B...")
        
        # Test model loading
        logger.info("üîç Testing Qwen 7B model loading...")
        from app.model import get_model
        from app.config import Config
        
        # Get model instance
        model = get_model()
        
        # Try a quick test generation
        logger.info("üß™ Testing email generation...")
        test_result = model.generate_email(
            intent="Write a test email",
            tone="Professional",
            length="Short",
            max_tokens=100
        )
        logger.info(f"‚úÖ Qwen 7B test successful! Generated {len(test_result)} characters")
        
        # Launch Gradio UI
        logger.info("üéØ Launching Gradio interface...")
        from app.gradio_ui import create_ui
        
        config = Config()
        config.GRADIO_SHARE = False  # Don't share publicly on Lightning
        config.GRADIO_HOST = "0.0.0.0"
        config.GRADIO_PORT = 7860
        
        ui = create_ui(config)
        logger.info("‚úÖ Qwen 7B Email Autowriter ready!")
        
        # Launch with Lightning-optimized settings
        ui.launch(
            server_name="0.0.0.0",
            server_port=7860,
            share=False,  # Lightning handles sharing
            show_error=True,
            quiet=False,
            enable_queue=True,  # Important for Lightning AI
            max_threads=10
        )
        
    except Exception as e:
        logger.error(f"‚ùå Failed to launch Qwen 7B app: {e}")
        logger.info("üîÑ Launching fallback demo...")
        launch_demo()

def launch_demo():
    """Launch a demo version if Qwen 7B fails"""
    import gradio as gr
    
    def generate_demo_email(intent, tone, length):
        """Generate a demo email (fallback)"""
        if not intent.strip():
            return "‚ùå Please enter an email intent."
        
        return f"""Subject: {intent}

Dear [Recipient],

This is a demo email generated by the LLM Email Autowriter running on Lightning AI.

Your request: {intent}
Selected tone: {tone}
Selected length: {length}

In the full version with Qwen 7B, this would be a professionally crafted, contextually appropriate email tailored to your specific requirements.

Best regards,
[Your Name]

---
Generated by LLM Email Autowriter (Demo Mode on Lightning AI)
"""
    
    # Create demo interface
    with gr.Blocks(title="LLM Email Autowriter - Lightning AI") as demo:
        gr.Markdown("""
        # üìß LLM Email Autowriter (Demo on Lightning AI)
        
        Professional email generation powered by AI. This demo shows the interface structure.
        The full version uses Qwen 7B for intelligent email generation.
        """)
        
        with gr.Row():
            with gr.Column():
                intent_input = gr.Textbox(
                    label="üìù Email Intent",
                    placeholder="e.g., Request meeting with team lead about project timeline",
                    lines=3
                )
                
                with gr.Row():
                    tone_dropdown = gr.Dropdown(
                        label="üì® Tone",
                        choices=["Professional", "Friendly", "Formal", "Casual", "Polite"],
                        value="Professional"
                    )
                    length_dropdown = gr.Dropdown(
                        label="üìè Length",
                        choices=["Short", "Medium", "Long"],
                        value="Medium"
                    )
                
                generate_btn = gr.Button("‚ú® Generate Email", variant="primary")
        
        email_output = gr.Textbox(
            label="üìÑ Generated Email",
            lines=12,
            show_copy_button=True
        )
        
        generate_btn.click(
            fn=generate_demo_email,
            inputs=[intent_input, tone_dropdown, length_dropdown],
            outputs=email_output
        )
        
        gr.Markdown("""
        ---
        **Lightning AI Demo** - The full version uses Qwen 7B for intelligent email generation.
        """)
    
    logger.info("üöÄ Launching demo interface...")
    demo.launch(
        server_name="0.0.0.0",
        server_port=7860,
        share=False,
        show_error=True
    )

def main():
    """Main execution function"""
    logger.info("üå©Ô∏è Starting LLM Email Autowriter on Lightning AI...")
    
    # Install dependencies
    install_dependencies()
    
    # Setup environment
    setup_environment()
    
    # Check GPU
    test_gpu_availability()
    
    # Launch the application
    launch_qwen_app()

if __name__ == "__main__":
    main()
